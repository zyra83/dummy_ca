[ ca ]
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = pki/intermediate
private_key       = $dir/private/intermediate.key
certificate       = $dir/certs/intermediate.pem
crl               = $dir/crl/intermediate.crl
policy            = policy_loose
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/database
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = "Pays (C=) Le code à deux lettres ISO pour le pays où est situé l\'organisme. Par exemple FR, CA"
stateOrProvinceName             = "Province, Région ou État (S=) Par exemple Normandie, Ile-de-France"
localityName                    = "Localité (L=) Par exemple Paris, Londres"
0.organizationName              = "Nom de l\'entreprise / Organisation (O=) Nom d\'une société ou d\'une association légalement constituée."
organizationalUnitName          = "Nom du département / Unité Organisationnelle : Par exemple RH, finance, informatique"
commonName                      = "Le nom complet (FQDN) du domaine Internet à sécuriser par exemple « www.wikipedia.org »"
emailAddress                    = "Une adresse e-mail pour contacter l\'organisation. Habituellement l\'adresse email de l\'administrateur de certificats"

# Optionally, specify some defaults.
countryName_default             = FR
stateOrProvinceName_default     = Landes
localityName_default            = Geloux
0.organizationName_default      = Flash Corp.
organizationalUnitName_default  = Informatique
commonName_default              = Flash Corp. intermediate CA
emailAddress_default            = contact@info.flashcorp.fr

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
crlDistributionPoints = URI:https://127.0.0.1:8200/v1/pki/crl

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
crlDistributionPoints = URI:https://127.0.0.1:8200/v1/pki/crl

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection
crlDistributionPoints = URI:https://127.0.0.1:8200/v1/pki/crl

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
crlDistributionPoints = URI:https://127.0.0.1:8200/v1/pki/crl

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
